package concepts

// Thanks to https://www.websudoku.com
// for the test data

import (
	"testing"

	"github.com/stretchr/testify/suite"
)

type SolveSudokuSuite struct {
	suite.Suite
}

func (s *SolveSudokuSuite) TestNewSolver() {
	solver := NewSudokuSolver([][]int{
		{5, 7, 0, 8, 0, 0, 9, 0, 0},
		{0, 3, 1, 5, 0, 9, 0, 6, 0},
		{0, 0, 0, 1, 3, 7, 0, 0, 0},
		{2, 9, 0, 0, 0, 8, 0, 7, 0},
		{0, 0, 8, 0, 9, 0, 3, 0, 0},
		{0, 1, 0, 4, 0, 0, 0, 8, 2},
		{0, 0, 0, 7, 4, 3, 0, 0, 0},
		{0, 4, 0, 9, 0, 2, 5, 3, 0},
		{0, 0, 7, 0, 0, 1, 0, 9, 8},
	})

	s.Equal([][]int{
		{5, 7, 0, 8, 0, 0, 9, 0, 0},
		{0, 3, 1, 5, 0, 9, 0, 6, 0},
		{0, 0, 0, 1, 3, 7, 0, 0, 0},
		{2, 9, 0, 0, 0, 8, 0, 7, 0},
		{0, 0, 8, 0, 9, 0, 3, 0, 0},
		{0, 1, 0, 4, 0, 0, 0, 8, 2},
		{0, 0, 0, 7, 4, 3, 0, 0, 0},
		{0, 4, 0, 9, 0, 2, 5, 3, 0},
		{0, 0, 7, 0, 0, 1, 0, 9, 8},
	}, solver.board)
}

func (s *SolveSudokuSuite) TestSolvesEasyPuzzle1() {
	solver := NewSudokuSolver([][]int{
		{5, 7, 0, 8, 0, 0, 2, 0, 0},
		{0, 3, 1, 5, 0, 9, 0, 6, 0},
		{0, 0, 0, 1, 3, 7, 0, 0, 0},
		{2, 9, 0, 0, 0, 8, 0, 7, 0},
		{0, 0, 8, 0, 9, 0, 3, 0, 0},
		{0, 1, 0, 4, 0, 0, 0, 8, 2},
		{0, 0, 0, 7, 4, 3, 0, 0, 0},
		{0, 4, 0, 9, 0, 2, 5, 3, 0},
		{0, 0, 7, 0, 0, 1, 0, 9, 8},
	})

	solver.Solve()

	s.Equal([][]int{
		{5, 7, 9, 8, 6, 4, 2, 1, 3},
		{8, 3, 1, 5, 2, 9, 7, 6, 4},
		{4, 6, 2, 1, 3, 7, 8, 5, 9},
		{2, 9, 4, 3, 1, 8, 6, 7, 5},
		{7, 5, 8, 2, 9, 6, 3, 4, 1},
		{6, 1, 3, 4, 7, 5, 9, 8, 2},
		{9, 8, 5, 7, 4, 3, 1, 2, 6},
		{1, 4, 6, 9, 8, 2, 5, 3, 7},
		{3, 2, 7, 6, 5, 1, 4, 9, 8},
	}, solver.board)
}

func (s *SolveSudokuSuite) TestSolvesEasyPuzzle2() {
	solver := NewSudokuSolver([][]int{
		{5, 3, 0, 0, 7, 0, 0, 0, 0},
		{6, 0, 0, 1, 9, 5, 0, 0, 0},
		{0, 9, 8, 0, 0, 0, 0, 6, 0},
		{8, 0, 0, 0, 6, 0, 0, 0, 3},
		{4, 0, 0, 8, 0, 3, 0, 0, 1},
		{7, 0, 0, 0, 2, 0, 0, 0, 6},
		{0, 6, 0, 0, 0, 0, 2, 8, 0},
		{0, 0, 0, 4, 1, 9, 0, 0, 5},
		{0, 0, 0, 0, 8, 0, 0, 7, 9},
	})

	solver.Solve()

	s.Equal([][]int{
		{5, 3, 4, 6, 7, 8, 9, 1, 2},
		{6, 7, 2, 1, 9, 5, 3, 4, 8},
		{1, 9, 8, 3, 4, 2, 5, 6, 7},
		{8, 5, 9, 7, 6, 1, 4, 2, 3},
		{4, 2, 6, 8, 5, 3, 7, 9, 1},
		{7, 1, 3, 9, 2, 4, 8, 5, 6},
		{9, 6, 1, 5, 3, 7, 2, 8, 4},
		{2, 8, 7, 4, 1, 9, 6, 3, 5},
		{3, 4, 5, 2, 8, 6, 1, 7, 9},
	}, solver.board)
}

func (s *SolveSudokuSuite) TestSolvesEvilPuzzle1() {
	solver := NewSudokuSolver([][]int{
		{6, 2, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 7, 0, 4, 0, 0, 0, 9},
		{0, 9, 0, 3, 7, 5, 0, 0, 0},
		{8, 0, 1, 7, 0, 0, 9, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 6, 0, 0, 3, 4, 0, 1},
		{0, 0, 0, 1, 8, 6, 0, 9, 0},
		{3, 0, 0, 0, 5, 0, 6, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 4, 7},
	})

	solver.Solve()

	s.Equal([][]int{
		{6, 2, 3, 9, 1, 8, 7, 5, 4},
		{5, 1, 7, 6, 4, 2, 3, 8, 9},
		{4, 9, 8, 3, 7, 5, 1, 2, 6},
		{8, 3, 1, 7, 2, 4, 9, 6, 5},
		{9, 7, 4, 5, 6, 1, 2, 3, 8},
		{2, 5, 6, 8, 9, 3, 4, 7, 1},
		{7, 4, 2, 1, 8, 6, 5, 9, 3},
		{3, 8, 9, 4, 5, 7, 6, 1, 2},
		{1, 6, 5, 2, 3, 9, 8, 4, 7},
	}, solver.board)
}

func BenchmarkEvilDifficulty(t *testing.B) {
	for i := 0; i < t.N; i++ {
		solver := NewSudokuSolver([][]int{
			{6, 2, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 7, 0, 4, 0, 0, 0, 9},
			{0, 9, 0, 3, 7, 5, 0, 0, 0},
			{8, 0, 1, 7, 0, 0, 9, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 0, 6, 0, 0, 3, 4, 0, 1},
			{0, 0, 0, 1, 8, 6, 0, 9, 0},
			{3, 0, 0, 0, 5, 0, 6, 0, 0},
			{0, 0, 0, 0, 0, 0, 0, 4, 7},
		})

		solver.Solve()
	}
}

func TestSolveSudokuSuite(t *testing.T) {
	suite.Run(t, new(SolveSudokuSuite))
}
